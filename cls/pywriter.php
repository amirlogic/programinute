<?php

// Python File Writer [ $pywrt ]

// Copyright 2015 Amir Hachaichi

/*
#
# Final .py file:
#
#	$this->before
#
#		$guiwrt->before
#
#		$guiwrt->inform
#
#		$guiwrt->after
#		
#	$this->after
#
#	getpy.php->footer
#
*/


	class PyWriter {
		
			private $curlevel = 0;
			//private $curinside = 0; // Current inside id
			
			// All varibles, results and properties must be registered
			
			private $varlist = array(); // Variables datatypes (true = string, false = not string) 
			
			public $writeafter = false; // newline() output
			
			public $before = "";
			
			public $after = "";
			
			//public $pyfile = ""; // Output file
			
			
			public $error;
			
			public $test;
			
			
			public function __construct(){ 
				
				
				// Start
				$this->newline("# Generated by Programinute.com");
				
				$this->newline("# Copyright 2015-2016");
				
				$this->newline("import cgi");
				
				$this->newline("import cgitb");
				
				$this->newline("cgitb.enable()");
				
				$this->newline("form = cgi.FieldStorage()");
				
				$this->output("Content-type: text/html");
				
				$this->output("");
				
				// No form
				
				$this->startIf("not form");
					
					$this->before .= "\tprint(\"";
					
						$this->writeafter = true; // Switch to after
					
					$this->after .= "\")\n"; // Must not be a newline
					
				$this->leveldec();
				
				
				// Form POSTed
				
				$this->startElse();
				
				$this->newline( 'pvarr = {}' ); // Init 
				
			}
			
			// -------------------------------------------------------------------- Basic functions (Low level)
			
			public function newline( $txt ){ // Write a new line
				
				$pfx = "";
				
				if($this->curlevel > 0){
					
					for( $t=0;$t<$this->curlevel;$t++ )
					{
						$pfx .= "\t";
					}
				}
				
				if( $this->writeafter ){
					
					$this->after .= $pfx.$txt."\n";
				}
				else{
					
					$this->before .= $pfx.$txt."\n";
				}
				
			}
			
			public function output( $out ){ // Print text
				
				$this->newline("print(\"".addslashes($out)."\")");
			}
			
			
			public function outvar( $var ){ // Print variable
				
				$this->newline( "print(".$out.")" );
			}
			
			
			public function outseg( $sgmts ){ // Prints segments ($sgmts = array[0]: txt/var, array[1]: value)
				
				$outrr = array();
				
				if( !is_array($sgmts) ){
					
					$this->error = "Not an array";
					return false;
				}
				
				for( $g=0; $g<count($sgmts); $g++ )
				{
					if( $sgmts[$g][0] == 'txt' ){
						
						$outrr[] = "\"" . addslashes( $sgmts[$g][1] ) . "\"";
					}
					else if ( $sgmts[$g][0] == 'var' ){
						
						$outrr[] = "str(".$sgmts[$g][1].")";
						
						/*if( !array_key_exists( $sgmts[$g][1],$this->varlist ) ){
							$this->error = "Variable not found";
							return false;
						}
						if( $this->varlist[$sgmts[$g][1]] == false ){ // Not Str
							$outrr[] = "str(".$sgmts[$g][1].")";
						}
						else{ // Str
							$outrr[] = $sgmts[$g][1];
						}*/
					}
				}
				
				//$out = implode('+',$outrr);
				
			
				$this->newline( "print(".implode('+',$outrr).")" );
			
				
			}
			
			
			public function setVar( $name,$val,$str ){ // Set a variable (testing function)
				
				if( $str === true ){
					
					$this->newline($name . " = \"" . addslashes($val) . "\"");
				}
				else{
					
					$this->newline($name . " = " . $val);
				}
				
				$this->varlist[$name] = $str;
			}
			
			public function addInput( $var ){ // (varname,string: true or false)
				
				$this->setVar('in'.$var,"form['in".$var."'].value",false);
			}
			
			
			// -------------------------------------------------------------- Level actions
			
			public function levelreset(){ // Reset level
				
				$this->curlevel = 0;
			}
			
			public function levelinc(){ // Increase level
				
				$this->curlevel++;
			}
			
			public function leveldec(){ // Decrease level
				
				$this->curlevel--;
			}
			
			
			
			// -------------------------------------------------------------- Conditions
			
			
			public function load_cdt_table( $table,$cdtlist,$col_letter ){
				
				
				if( !is_array($cdtlist) || !is_array($col_letter) ){
					
					$this->error = "Invalid Condition input";
					return false;
				}
				
				$operr = array( 	// Operators
				
								'=' => '==',
								'>' => '>',
								'<' => '<',
								'#' => '!=',
								'!=' => '!='
								
								);
				
				$varpfx = "cdt" . $table . "_";
				
				$cvars = array(); // Preparing final array
				
				$cols = array_keys($cdtlist); // Columns position
				
				
				for( $c=0; $c<count($cols); $c++ ) // Column looping
				{
					
					$cvars[$c] = array();
					
					
					for( $l=0; $l<count($cdtlist[$cols[$c]]); $l++ ) // Level looping
					{
						
						//$cvars[$l] = array();
						
						
						if( $l == 0 ){ // --------------------------------------------------------------- Top level
							
							$vadd = "";
							
							for( $i=0; $i<count($cdtlist[$cols[$c]][0]); $i++ ) // InLevel Position
							{
							
								if( $cdtlist[$cols[$c]][0][$i][0] == 'cdt' )
								{
								
									$vadd .= $cdtlist[$cols[$c]][0][$i][1] . " " . $operr[$cdtlist[$cols[$c]][0][$i][2]] 
									
											. " \"" . $cdtlist[$cols[$c]][0][$i][3] . "\"";
								
								}
								else if ( $cdtlist[$cols[$c]][0][$i][0] == 'oper' ){
								
								
									$vadd .= " " . $cdtlist[$cols[$c]][0][$i][1] . " ";
								
								}
								else if ( $cdtlist[$cols[$c]][0][$i][0] == 'grp' ){
									
									
									$vadd .= $varpfx.$col_letter[$cols[$c]].$cdtlist[$cols[$c]][0][$i][1];
									
								}
								else{ // Error
								
									return false;
								
								}
							
							}
							
							//
							
							$cvars[$c][$varpfx.$col_letter[$cols[$c]].'top'] = $vadd;
							
							unset($vadd);
							
						}
						else{ // -------------------------------------------------------------------------- Nested
							
							
							for( $g=0; $g<count($cdtlist[$cols[$c]][$l]); $g++ ) // Groups
							{
								
								$vadd = "";
							
								for( $i=0; $i<count($cdtlist[$cols[$c]][$l][$g][1]); $i++ ) // InLevel Position
								{
							
									if( $cdtlist[$cols[$c]][$l][$g][1][$i][0] == 'cdt' )
									{
								
										$vadd .= $cdtlist[$cols[$c]][$l][$g][1][$i][1] . " \"" 
										
												. $operr[$cdtlist[$cols[$c]][$l][$g][1][$i][2]] 
										
												. "\" " . $cdtlist[$cols[$c]][$l][$g][1][$i][3];
								
									}
									else if ( $cdtlist[$cols[$c]][$l][$g][1][$i][0] == 'oper' ){
								
								
										$vadd .= " " . $cdtlist[$cols[$c]][$l][$g][1][$i][1] . " ";
								
									}
									else if ( $cdtlist[$cols[$c]][$l][$g][1][$i][0] == 'grp' ){
									
									
										$vadd .= $varpfx.$col_letter[$cols[$c]].$cdtlist[$cols[$c]][$l][$g][1][$i][1];
									
									}
									else{ // Error
								
										return false;
								
									}
							
								} // InPos
								
								$cvars[$c][$varpfx.$col_letter[$cols[$c]].$cdtlist[$cols[$c]][$l][$g][0]] = $vadd;
								
								unset($vadd);
								
								
							} // Groups
							
								
						} // Level 0 or not
						
						

					} // Level
					
					// Defining variables in Python
					
					$varr = array_keys($cvars[$c]);
					
					$mxn = count($varr) - 1;
					
					for( $v=$mxn; $v>=0; $v-- )
					{
						
						$this->setVar($varr[$v],$cvars[$c][$varr[$v]],false);
						
					}
					
					unset($varr);
					
				} // Column
				
				
			}
			
			
			// Conditions (Reminder: Level decrease at the end)
			
			
			public function startIf($st){ // ------------------------------------------------------ CONDITION IF
				
				$this->newline("if(".$st."):");
				
				$this->curlevel++;
			}
			
			
			public function startElseIf($st){ // -------------------------------------------------- CONDITION ELSE IF
				
				$this->newline("elif(".$st."):");
				
				$this->curlevel++;
			}
			
			
			public function startElse(){ // ----------------------------------------------------------------- CONDITION ELSE
				
				$this->newline("else:");
				
				$this->curlevel++;
			}
			
			
			public function startFunction( $fname,$fparm ){ // ---------------------------------------------- START FUNCTION
			
				$this->newline( "def " . $fname . "(" . $fparm . "):" );
				
				$this->curlevel++;
			}
			
			
			public function addFooter(){ // Finishes the file
				
				$this->levelreset();
				$this->output("<footer style=\"padding-top:30px;text-align:center;\">Copyright 2015</footer></body></html>");
			}
	}
	
	$pywrt = new PyWriter();

?>